name: Cross-Platform Release

on:
  push:
    tags:
      - "v*"

env:
  RUST_TOOLCHAIN: nightly
  CARGO_MAKE_VERSION: 0.36.5

jobs:
  build:
    name: Build and Package
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust@v1
        with:
          targets: |
            x86_64-pc-windows-msvc
            x86_64-pc-windows-gnu
            x86_64-unknown-linux-gnu
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          profile: minimal

      - name: Install Linux Cross-Compiler
        run: |
          choco install -y mingw --params "/InstallDir:C:/msys64"
          refreshenv
          C:/msys64/msys2_shell.cmd -c "pacman -Syu --noconfirm --needed mingw-w64-x86_64-gcc"

      - name: Install Visual Studio Build Tools
        run: |
          choco install -y visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.19041"

      - name: Install cargo-make
        run: cargo install cargo-make --version ${{ env.CARGO_MAKE_VERSION }}

      - name: Run Full Build
        run: cargo make bin

      - name: Verify Build Output
        run: |
          ls ../../bin -Recurse
          Test-Path -Path ../../bin/client/client-x86_64-windows-pc-gnu.exe
          Test-Path -Path ../../bin/server/server-x86_64-unknown-linux-gnu

      - uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: ../../bin
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: binaries
          path: bin

      - name: Package Client
        run: |
          Compress-Archive -Path bin/client/* -DestinationPath client.zip
          Get-Item client.zip

      - name: Package Server
        run: |
          Compress-Archive -Path bin/server/* -DestinationPath server.zip
          Get-Item server.zip

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Client Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: client.zip
          asset_name: client.zip
          asset_content_type: application/zip

      - name: Upload Server Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: server.zip
          asset_name: server.zip
          asset_content_type: application/zip
