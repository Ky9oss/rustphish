use std::fs::File;
use std::io::{BufReader, Write};
use zip::{ZipWriter, write::SimpleFileOptions};

pub fn zip(input_path: &str, output_path: &str, is_password: bool, password: &str) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    // Create output zip file
    let file = File::create(output_path)?;
    let mut zip = ZipWriter::new(file);

    // Configure zip options
    let options = match is_password {
        true => {

            SimpleFileOptions::default()
                .compression_method(zip::CompressionMethod::Deflated)
                .with_aes_encryption(zip::AesMode::Aes256, password)
                .unix_permissions(0o755)

        },
        false => {

            SimpleFileOptions::default()
                .compression_method(zip::CompressionMethod::Deflated)
                .unix_permissions(0o755)

        }
    };

    // Get file name from path
    let file_name = std::path::Path::new(input_path)
        .file_name()
        .unwrap_or_default()
        .to_string_lossy();

    // Add file to zip
    zip.start_file(file_name, options)?;
    let mut input_file = BufReader::new(File::open(input_path)?);
    std::io::copy(&mut input_file, &mut zip)?;

    // Finalize zip file
    zip.finish()?;
    Ok(())
}
