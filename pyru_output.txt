warning: profiles for the non root package will be ignored, specify profiles at the workspace root:
package:   C:\Users\Ky9oss\Tools\Tools_Hacker\13.KgScript\rust\rustphish\appendix\Cargo.toml
workspace: C:\Users\Ky9oss\Tools\Tools_Hacker\13.KgScript\rust\rustphish\Cargo.toml
warning: virtual workspace defaulting to `resolver = "1"` despite one or more workspace members being on edition 2024 which implies `resolver = "3"`
note: to keep the current resolver, specify `workspace.resolver = "1"` in the workspace root's manifest
note: to use the edition 2024 resolver, specify `workspace.resolver = "3"` in the workspace root's manifest
note: for more details see https://doc.rust-lang.org/cargo/reference/resolver.html#resolver-versions
warning: C:\Users\Ky9oss\Tools\Tools_Hacker\13.KgScript\rust\rustphish\appendix\Cargo.toml: unused manifest key: target.x86_64-pc-windows-msvc.rustflags
   Compiling appendix v0.1.0 (C:\Users\Ky9oss\Tools\Tools_Hacker\13.KgScript\rust\rustphish\appendix)
error[E0425]: cannot find value `MEM_RELEASE` in this scope
  --> appendix\src\main.rs:99:39
   |
99 |         VirtualFree(ptr as *mut _, 0, MEM_RELEASE);
   |                                       ^^^^^^^^^^^ not found in this scope

warning: unused imports: `DLL_PROCESS_ATTACH`, `DLL_THREAD_ATTACH`, and `INTERNET_DEFAULT_HTTP_PORT`
  --> appendix\src\main.rs:59:30
   |
59 | ...Services::{DLL_PROCESS_ATTACH, DLL_THREAD_ATTACH},
   |               ^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^
60 | ...::{VirtualAlloc, VirtualFree, MEM_COMMIT, PAGE_READWRITE},
61 | ...nHttp::{WinHttpOpen, WinHttpConnect, WinHttpOpenRequest, WinHttpSendRequest, WinHttpCloseHandle, INTERNET_DEFAULT_HTTP_PORT, WINHTTP_A...
   |                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `alloc::vec::Vec`
  --> appendix\src\main.rs:64:5
   |
64 | use alloc::vec::Vec;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `core::ffi::c_void`
  --> appendix\src\main.rs:67:5
   |
67 | use core::ffi::c_void;
   |     ^^^^^^^^^^^^^^^^^

warning: unused import: `core::cell::UnsafeCell`
  --> appendix\src\main.rs:68:5
   |
68 | use core::cell::UnsafeCell;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `null_mut`
  --> appendix\src\main.rs:69:23
   |
69 | use core::ptr::{null, null_mut};
   |                       ^^^^^^^^

warning: unused import: `windows_sys::Win32::Networking::WinHttp::*`
  --> appendix\src\main.rs:70:5
   |
70 | use windows_sys::Win32::Networking::WinHttp::*;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the feature `abi_thiscall` has been stable since 1.73.0 and no longer requires an attribute to enable
 --> appendix\src\main.rs:4:12
  |
4 | #![feature(abi_thiscall)]
  |            ^^^^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> appendix\src\main.rs:11:9
   |
11 |         *dest.add(i) = *src.add(i);
   |         ^^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> appendix\src\main.rs:8:1
   |
8  | pub unsafe extern "C" fn memcpy(dest: *mut u8, src: *const u8, n: usize) -> *mut u8 {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: `#[warn(unsafe_op_in_unsafe_fn)]` on by default

warning[E0133]: call to unsafe function `core::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block
  --> appendix\src\main.rs:11:10
   |
11 |         *dest.add(i) = *src.add(i);
   |          ^^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> appendix\src\main.rs:11:24
   |
11 |         *dest.add(i) = *src.add(i);
   |                        ^^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `core::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block
  --> appendix\src\main.rs:11:25
   |
11 |         *dest.add(i) = *src.add(i);
   |                         ^^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> appendix\src\main.rs:22:9
   |
22 |         *s.add(i) = byte;
   |         ^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> appendix\src\main.rs:18:1
   |
18 | pub unsafe extern "C" fn memset(s: *mut u8, c: i32, n: usize) -> *mut u8 {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `core::ptr::mut_ptr::<impl *mut T>::add` is unsafe and requires unsafe block
  --> appendix\src\main.rs:22:10
   |
22 |         *s.add(i) = byte;
   |          ^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> appendix\src\main.rs:32:17
   |
32 |         let a = *s1.add(i);
   |                 ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> appendix\src\main.rs:29:1
   |
29 | pub unsafe extern "C" fn memcmp(s1: *const u8, s2: *const u8, n: usize) -> i32 {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning[E0133]: call to unsafe function `core::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block
  --> appendix\src\main.rs:32:18
   |
32 |         let a = *s1.add(i);
   |                  ^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: dereference of raw pointer is unsafe and requires unsafe block
  --> appendix\src\main.rs:33:17
   |
33 |         let b = *s2.add(i);
   |                 ^^^^^^^^^^ dereference of raw pointer
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior

warning[E0133]: call to unsafe function `core::ptr::const_ptr::<impl *const T>::add` is unsafe and requires unsafe block
  --> appendix\src\main.rs:33:18
   |
33 |         let b = *s2.add(i);
   |                  ^^^^^^^^^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior

warning[E0133]: call to unsafe function `windows_sys::Win32::System::Memory::VirtualAlloc` is unsafe and requires unsafe block
  --> appendix\src\main.rs:89:9
   |
89 | /         VirtualAlloc(
90 | |             core::ptr::null_mut(),
91 | |             layout.size(),
92 | |             MEM_COMMIT,
93 | |             PAGE_READWRITE,
94 | |         ) as _
   | |_________^ call to unsafe function
   |
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/unsafe-op-in-unsafe-fn.html>
   = note: consult the function's documentation for information on how to avoid undefined behavior
note: an unsafe function restricts its caller, but its body is safe by default
  --> appendix\src\main.rs:88:5
   |
88 |     unsafe fn alloc(&self, layout: core::alloc::Layout) -> *mut u8 {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `result`
   --> appendix\src\main.rs:175:13
    |
175 |         let result = WinHttpSendRequest(
    |             ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `info`
   --> appendix\src\main.rs:204:10
    |
204 | fn panic(info: &PanicInfo) -> ! {
    |          ^^^^ help: if this is intentional, prefix it with an underscore: `_info`

Some errors have detailed explanations: E0133, E0425.
For more information about an error, try `rustc --explain E0133`.
warning: `appendix` (bin "appendix") generated 20 warnings
error: could not compile `appendix` (bin "appendix") due to 1 previous error; 20 warnings emitted
